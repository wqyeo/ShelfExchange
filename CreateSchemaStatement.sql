-- MySQL Script generated by MySQL Workbench
-- Sun 26 Mar 2023 12:28:38 AM +08
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema shelf_exchange
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema shelf_exchange
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `shelf_exchange` DEFAULT CHARACTER SET utf8 ;
USE `shelf_exchange` ;

-- -----------------------------------------------------
-- Table `shelf_exchange`.`book`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`book` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(255) NOT NULL,
  `release_date` DATE NOT NULL,
  `image` MEDIUMBLOB NULL,
  `language_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`user`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(255) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `password` VARCHAR(128) NOT NULL,
  `profile_picture` MEDIUMBLOB NULL,
  `joined_date` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`book_inventory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`book_inventory` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `book_id` INT UNSIGNED NOT NULL,
  `quantity` INT UNSIGNED NOT NULL,
  `cost_per_quantity` DECIMAL(10,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Keep track on the quantity of books';


-- -----------------------------------------------------
-- Table `shelf_exchange`.`review`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`review` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `book_id` INT UNSIGNED NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  `rating` SMALLINT(2) UNSIGNED NOT NULL COMMENT 'Should be 0 - 10;',
  `comment` TEXT NULL,
  `created_at` DATE NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`book_order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`book_order` (
  `book_inventory_id` INT UNSIGNED NOT NULL,
  `order_id` INT UNSIGNED NOT NULL,
  `quantity` INT UNSIGNED NOT NULL,
  `cost_per_quantity` DECIMAL(10,2) UNSIGNED NOT NULL,
  PRIMARY KEY (`book_inventory_id`, `order_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`book_author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`book_author` (
  `book_id` INT UNSIGNED NOT NULL,
  `author_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`book_id`, `author_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`author` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`book_language`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`book_language` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `language_code` VARCHAR(8) NOT NULL COMMENT 'Based off ISO 639-2 Code',
  `language_name` VARCHAR(64) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  UNIQUE INDEX `language_code_UNIQUE` (`language_code` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`book_tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`book_tag` (
  `book_id` INT UNSIGNED NOT NULL,
  `tag_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`book_id`, `tag_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`tag`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`tag` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(64) NOT NULL,
  `description` TEXT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`order_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`order_history` (
  `id` INT UNSIGNED NOT NULL,
  `order_date` DATE NOT NULL,
  `user_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `shelf_exchange`.`seller`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `shelf_exchange`.`seller` (
  `user_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `user_id_UNIQUE` (`user_id` ASC) VISIBLE)
ENGINE = InnoDB;

USE `shelf_exchange` ;

-- -----------------------------------------------------
-- procedure get_book_authors
-- -----------------------------------------------------

DELIMITER $$
USE `shelf_exchange`$$
-- Returns a list of all authors that have contributed to the book (by book id).
-- Returns: List of author names and description
CREATE PROCEDURE `get_book_authors`(IN book_id INT)
BEGIN
	SET @sql = 'SELECT author.id, author.name, author.description FROM author 
				INNER JOIN book_author ON author.id = book_author.author_id
				WHERE book_author.book_id = ?';
	PREPARE stmt FROM @sql;
    EXECUTE stmt USING @`book_id`;
    DEALLOCATE PREPARE stmt;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure search_books_by_tags
-- -----------------------------------------------------

DELIMITER $$
USE `shelf_exchange`$$
-- Search for book rows by inputting tags.
-- Sample Input: "(tag1,tag2,tag3)"
-- Output only contain strict matches of all tags. (Partial matches excluded)

-- Returns: List of book id, title and image.
CREATE PROCEDURE `search_books_by_tags`(IN tag_list VARCHAR(255))
BEGIN
	-- Join all 3 tables by respective id.
    -- Filter by given tags (ensure the tag name exists in the given list).
    -- Filter out books that only partially match a few tags.
    SET @sql = CONCAT('SELECT book.id, book.title, book.image
                        FROM book
                        INNER JOIN book_tag ON book.id = book_tag.book_id
                        INNER JOIN tags ON book_tag.tag_id = tag.id
                        WHERE tag.name IN (', tag_list, ')
                        GROUP BY book.id
                        HAVING COUNT(DISTINCT tag.id) = ', LENGTH(tag_list) - LENGTH(REPLACE(tag_list, ',', '')) + 1);
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure search_books_by_tags_partial
-- -----------------------------------------------------

DELIMITER $$
USE `shelf_exchange`$$
-- Search for book rows by inputting tags.
-- Sample Input: "(tag1,tag2,tag3)" 
-- Output includes partial matches.

-- Returns: List of book id, title and image.
CREATE PROCEDURE `search_books_by_tags_partial`(IN tag_list VARCHAR(255))
BEGIN
	-- Join all 3 tables by respective id.
    -- Filter by given tags (ensure the tag name exists in the given list).
    SET @sql = CONCAT('SELECT book.id, book.title, book.image
                        FROM book
                        INNER JOIN book_tag ON book.id = book_tag.book_id
                        INNER JOIN tags ON book_tag.tag_id = tag.id
                        WHERE tag.name IN (', tag_list, ')'
                        );
    PREPARE stmt FROM @sql;
    EXECUTE stmt;
    DEALLOCATE PREPARE stmt;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_book_tags
-- -----------------------------------------------------

DELIMITER $$
USE `shelf_exchange`$$
-- Find all tags in a book.
-- Returns: List of tag id, names and description
CREATE PROCEDURE `get_book_tags`(IN `book_id` INT)
BEGIN
    SET @sql = 'SELECT tag.id, tag.name, tag.description FROM tag
                INNER JOIN book_tag ON tag.id = book_tag.tag_id
                WHERE book_tag.book_id = ?';
    PREPARE stmt FROM @sql;
    EXECUTE stmt USING @`book_id`;
    DEALLOCATE PREPARE stmt;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_user_order_history
-- -----------------------------------------------------

DELIMITER $$
USE `shelf_exchange`$$
-- Returns a list of `total_cost`, `order_date` and the corresponding `user_order`.`id` with it.
CREATE PROCEDURE `get_user_order_history`(IN `user_id` INT)
BEGIN
    DECLARE user_order_id INT;
    DECLARE order_date DATE;
    DECLARE total_cost DECIMAL(10,2);
    
    -- Find all user orders for the given user id
    DECLARE cursor_user_order CURSOR FOR 
        SELECT `id`, `order_date` FROM `user_order` WHERE `user_id` = user_id;
        
    -- Declare a temporary table to store the user orders and their corresponding total costs
    CREATE TEMPORARY TABLE IF NOT EXISTS `temp_user_order_cost` (
        `user_order_id` INT,
        `total_cost` DECIMAL(10,2)
    );
    
    -- Open the cursor and loop through the user orders
    OPEN cursor_user_order;
    user_order_loop: LOOP
        FETCH cursor_user_order INTO user_order_id, order_date;
        
        -- If there are no more user orders to fetch, exit the loop
        IF (user_order_id IS NULL) THEN
            LEAVE user_order_loop;
        END IF;
        
        -- Calculate the total cost of all book orders associated with the user's order
        SELECT SUM(`quantity` * `cost_per_quantity`) INTO total_cost FROM `book_order` WHERE `user_order_id` = user_order_id;
        
        -- Insert the user order id and the total cost into the temporary table
        INSERT INTO `temp_user_order_cost` (`user_order_id`, `total_cost`) VALUES (user_order_id, total_cost);
    END LOOP;
    
    -- Close the cursor
    CLOSE cursor_user_order;
    
    -- Select all the user orders and their corresponding total costs from the temporary table
    SELECT `user_order`.*, `temp_user_order_cost`.`total_cost`
    FROM `user_order`
    JOIN `temp_user_order_cost` ON `user_order`.`id` = `temp_user_order_cost`.`user_order_id`;
    
    -- Drop the temporary table
    DROP TEMPORARY TABLE IF EXISTS `temp_user_order_cost`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_books_from_order
-- -----------------------------------------------------

DELIMITER $$
USE `shelf_exchange`$$
-- Returns a list of `book`.`id`, `image` and `title`.
CREATE PROCEDURE `get_books_from_order`(IN `order_id` INT)
BEGIN
    SELECT `book`.`id`, `book`.`image`, `book`.`title`
    FROM `book_order`
    JOIN `book_inventory` ON `book_order`.`book_inventory_id` = `book_inventory`.`id`
    JOIN `book` ON `book_inventory`.`book_id` = `book`.`id`
    WHERE `book_order`.`id` = order_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure get_reviews_from_book
-- -----------------------------------------------------

DELIMITER $$
USE `shelf_exchange`$$
CREATE PROCEDURE `get_reviews_from_book`(IN book_id INT)
BEGIN
	SET @sql = 'SELECT review.user_id, review.rating, review.comment, review.created_at FROM review WHERE review.book_id = ?';
	PREPARE stmt FROM @sql;
    EXECUTE stmt USING @`book_id`;
    DEALLOCATE PREPARE stmt;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
